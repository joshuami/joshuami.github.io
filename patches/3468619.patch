diff --git a/.gitignore b/.gitignore
index 3c3629e..82bbd3c 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1 +1,12 @@
 node_modules
+
+# Ignore files that DDEV Drupal Contrib adds.
+.editorconfig
+.gitattributes
+.ddev/
+/vendor/
+/web/
+/recipes/
+
+# Ignore PHPStorm Project files
+.idea
diff --git a/.prettierrc.json b/.prettierrc.json
new file mode 120000
index 0000000..464f711
--- /dev/null
+++ b/.prettierrc.json
@@ -0,0 +1 @@
+web/core/.prettierrc.json
\ No newline at end of file
diff --git a/js/tour.js b/js/tour.js
index 14cc410..8e69793 100644
--- a/js/tour.js
+++ b/js/tour.js
@@ -55,7 +55,7 @@ import 'shepherd.js/dist/css/shepherd.css';
           model.set('isActive', true);
         }
 
-        document.addEventListener('keydown', function (event) {
+        document.addEventListener('keydown', function handleKeydown(event) {
           if (event.altKey && event.code === 'KeyT') {
             model.set('isActive', true);
             event.preventDefault();
@@ -64,13 +64,13 @@ import 'shepherd.js/dist/css/shepherd.css';
         });
 
         // Provide an API.
-        Drupal.tour.setActive = function (active = true) {
+        Drupal.tour.setActive = function setActive(active = true) {
           model.set('isActive', active);
         };
-        Drupal.tour.get = function () {
+        Drupal.tour.get = function get() {
           return Shepherd.activeTour;
         };
-        Drupal.tour.getPromise = function (timeout = 2000) {
+        Drupal.tour.getPromise = function getPromise(timeout = 2000) {
           const timerMillSecs = 10;
           return new Promise((resolve, reject) => {
             (function waitForTour(timeLeft) {
@@ -80,7 +80,7 @@ import 'shepherd.js/dist/css/shepherd.css';
               if (timeLeft <= 0) {
                 reject();
               }
-              setTimeout(function () {
+              setTimeout(function waitForTourTimeout() {
                 waitForTour(timeLeft - timerMillSecs);
               }, timerMillSecs);
             })(timeout);
@@ -179,7 +179,8 @@ import 'shepherd.js/dist/css/shepherd.css';
         }
         // Render the state.
         const isActive = this.model.get('isActive');
-        this.$el.each(function (index, element) {
+        this.$el.each(function toggleElement(index, element) {
+          // eslint-disable-next-line no-unused-vars
           const toggleButton =
             $(element).prop('tagName') === 'BUTTON' ||
             $(element).attr('role') === 'button'
@@ -259,7 +260,7 @@ import 'shepherd.js/dist/css/shepherd.css';
               };
 
               const step = shepherdTour.addStep(tourItemOptions);
-              step.on('before-show', function () {
+              step.on('before-show', function beforeShow() {
                 const selector = step.options.attachTo.element;
                 // eslint-disable-next-line no-jquery/no-is
                 if (selector && !$(selector).is(':visible')) {
@@ -277,7 +278,7 @@ import 'shepherd.js/dist/css/shepherd.css';
               });
 
               // @todo remove when fixed upstream.
-              step.on('show', function () {
+              step.on('show', function onShow() {
                 const shepherdElement = document.querySelectorAll(
                   '.shepherd-element.shepherd-enabled',
                 );
diff --git a/modules/tourauto/js/tourauto.js b/modules/tourauto/js/tourauto.js
new file mode 100644
index 0000000..b7d2973
--- /dev/null
+++ b/modules/tourauto/js/tourauto.js
@@ -0,0 +1,23 @@
+(function tourautoModule($, Drupal) {
+  Drupal.behaviors.tourauto = {};
+  Drupal.behaviors.tourauto.attach = function tourautoAttach(
+    context,
+    settings,
+  ) {
+    once('tourauto', 'body').forEach(function tourautoForEach() {
+      if (settings.tourauto_open) {
+        // Wait for the tour module to be fully initialized
+        const waitForTourModule = function waitForTourModule() {
+          if (Drupal.tour && Drupal.tour.setActive) {
+            Drupal.tour.setActive(true);
+          } else {
+            setTimeout(waitForTourModule, 50);
+          }
+        };
+
+        // Start checking after a short delay to let tour module initialize
+        setTimeout(waitForTourModule, 100);
+      }
+    });
+  };
+})(jQuery, Drupal);
diff --git a/modules/tourauto/src/TourautoManager.php b/modules/tourauto/src/TourautoManager.php
new file mode 100644
index 0000000..3cb809f
--- /dev/null
+++ b/modules/tourauto/src/TourautoManager.php
@@ -0,0 +1,194 @@
+<?php
+
+namespace Drupal\tourauto;
+
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\StringTranslationTrait;
+use Drupal\tour\Entity\Tour;
+use Drupal\tour\TourHelper;
+use Drupal\user\UserDataInterface;
+
+/**
+ * Manages tourauto-related data for a given user account.
+ *
+ * The tourauto.manager service manages data for the current user. To manage
+ * data for a different user, you can create a new instance of the class, using
+ * the helper method getManagerForAccount() on the default Drupal
+ * tourauto.manager service.
+ */
+class TourautoManager {
+
+  use StringTranslationTrait;
+
+  /**
+   * The tour query interface.
+   *
+   * @var \Drupal\Core\Entity\Query\QueryInterface
+   */
+  protected QueryInterface $tourQuery;
+
+  /**
+   * Constructs a new TourautoManager object.
+   *
+   * @param \Drupal\Core\Session\AccountInterface $account
+   *   The current user account.
+   * @param \Drupal\user\UserDataInterface $userData
+   *   The user data service.
+   * @param \Drupal\Core\Routing\RouteMatchInterface $currentRouteMatch
+   *   The current route match service.
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   *   The entity type manager service.
+   * @param \Drupal\tour\TourHelper $tourHelper
+   *   The tour helper service.
+   * @param \Drupal\Core\StringTranslation\TranslationInterface $stringTranslation
+   *   The string translation service.
+   */
+  public function __construct(
+    protected AccountInterface $account,
+    protected UserDataInterface $userData,
+    protected RouteMatchInterface $currentRouteMatch,
+    protected EntityTypeManagerInterface $entityTypeManager,
+    protected TourHelper $tourHelper,
+    protected $stringTranslation,
+  ) {
+    $this->tourQuery = $this->entityTypeManager->getStorage('tour')->getQuery()->accessCheck(FALSE);
+    $this->setStringTranslation($stringTranslation);
+  }
+
+  /**
+   * Returns an instance of TourautoManager for a different user account.
+   *
+   * @param \Drupal\Core\Session\AccountInterface $account
+   *   The account to use (for example, the user being edited on user/%/edit).
+   *
+   * @return \Drupal\tourauto\TourautoManager
+   *   A new TourautoManager instance for the specified account.
+   */
+  public function getManagerForAccount(AccountInterface $account) {
+    return new static($account, $this->userData, $this->currentRouteMatch, $this->entityTypeManager, $this->tourHelper, $this->stringTranslation);
+  }
+
+  /**
+   * Whether the current user has tourauto enabled.
+   *
+   * @return bool
+   *   TRUE if tourauto is enabled for the user, FALSE otherwise.
+   *   Defaults to TRUE for users who haven't saved a preference.
+   */
+  public function tourautoEnabled(): bool {
+    return $this->account->id() && ($this->userData->get('tourauto', $this->account->id(), 'tourauto_enable') ?? TRUE);
+  }
+
+  /**
+   * Saves the tourauto_enable preference for a given user.
+   *
+   * @param bool $preference
+   *   Whether the user wants tourauto enabled or not.
+   */
+  public function setTourautoPreference(bool $preference): void {
+    $this->account->id() && $this->userData->set('tourauto', $this->account->id(), 'tourauto_enable', (bool) $preference);
+  }
+
+  /**
+   * Returns a list of tours to be shown for the current route.
+   *
+   * This should ideally come from tour module.
+   * (see https://www.drupal.org/project/drupal/issues/3214593)
+   *
+   * @return array
+   *   Array of tour configuration data, keyed by tour id.
+   */
+  public function getCurrentTours(): array {
+    $items = [];
+
+    if (!$this->account->hasPermission('access tour')) {
+      return $items;
+    }
+
+    // Use the injected tour helper service to get tours for the current route.
+    $results = $this->tourHelper->loadTourEntities();
+
+    if (!empty($results)) {
+      $tours = Tour::loadMultiple($results);
+      foreach ($tours as $tour_id => $tour) {
+        foreach ($tour->getTips() as $tip) {
+          $tip_id = $tip->id();
+          $items[$tour_id][$tip_id] = $tip->getConfiguration();
+        }
+      }
+    }
+
+    return $items;
+  }
+
+  /**
+   * Gets the current user's tourauto state.
+   *
+   * @return array
+   *   The user's tourauto state array.
+   */
+  protected function getState(): array {
+    // Load the current user's already visited tours.
+    $json = $this->userData->get('tourauto', $this->account->id(), 'tourauto_state') ?? '{}';
+    try {
+      $state = json_decode($json, JSON_OBJECT_AS_ARRAY);
+      $state['seen'] = $state['seen'] ?? [];
+    }
+    catch (\Exception $e) {
+      $state = ['seen' => []];
+    }
+    return $state;
+  }
+
+  /**
+   * Resets the user's tourauto state, so all their tours show up as unseen.
+   */
+  public function clearState(): void {
+    $this->userData->delete('tourauto', $this->account->id(), 'tourauto_state');
+  }
+
+  /**
+   * Returns a list of tours that have been seen by the current user.
+   *
+   * @return string[]
+   *   Array of tour IDs that have been seen.
+   */
+  public function getSeenTours(): array {
+    $state = $this->getState();
+    return array_keys($state['seen'] ?? []);
+  }
+
+  /**
+   * Marks a list of tour IDs as seen for the current user.
+   *
+   * @param string[] $tours
+   *   Array of tour IDs to mark as seen.
+   */
+  public function markToursSeen(array $tours): void {
+    $state = $this->getState();
+    $old_json = json_encode($state);
+    $state['seen'] = $state['seen'] + array_fill_keys($tours, TRUE);
+    $new_json = json_encode($state);
+    if ($old_json !== $new_json) {
+      $this->userData->set('tourauto', $this->account->id(), 'tourauto_state', $new_json);
+    }
+  }
+
+  /**
+   * Translates a string using the injected translation service.
+   *
+   * @param string $string
+   *   The string to translate.
+   *
+   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   *   The translated string.
+   */
+  public function translate(string $string) {
+    // phpcs:ignore Drupal.Semantics.FunctionT.NotLiteralString
+    return $this->t($string);
+  }
+
+}
diff --git a/modules/tourauto/tests/README.md b/modules/tourauto/tests/README.md
new file mode 100644
index 0000000..6d0328b
--- /dev/null
+++ b/modules/tourauto/tests/README.md
@@ -0,0 +1,102 @@
+# Tourauto Module Tests
+
+This directory contains tests for the tourauto submodule functionality.
+
+## Test Structure
+
+### Unit Tests (`src/Unit/`)
+- **TourautoManagerTest.php**: Tests the core TourautoManager class functionality
+  - User preference management
+  - Tour state management
+  - Service instantiation
+  - Translation functionality
+
+### Kernel Tests (`src/Kernel/`)
+- **TourautoServiceTest.php**: Tests the tourauto service registration and basic functionality
+  - Service availability
+  - User account management
+  - Default preferences
+  - State management
+
+### Functional Tests (`src/Functional/`)
+- **TourautoFunctionalTest.php**: Tests the user interface integration
+  - User form elements
+  - Preference saving
+  - Tour state clearing
+  - JavaScript loading
+
+### FunctionalJavascript Tests (`src/FunctionalJavascript/`)
+- **TourautoJavascriptTest.php**: Tests the JavaScript behavior
+  - JavaScript loading and initialization
+  - DrupalSettings integration
+  - Debug information
+  - Tour module compatibility
+
+### Test Module (`modules/tourauto_test/`)
+- **tourauto_test**: A test module that provides tours for testing
+  - Test tour configuration
+  - Test controller and routes
+  - Test page with tour elements
+
+## Running Tests
+
+To run the tourauto tests:
+
+```bash
+# Run all tourauto tests
+ddev phpunit --group=tourauto
+
+# Run specific test types
+ddev phpunit modules/tourauto/tests/src/Unit/
+ddev phpunit modules/tourauto/tests/src/Kernel/
+ddev phpunit modules/tourauto/tests/src/Functional/
+ddev phpunit modules/tourauto/tests/src/FunctionalJavascript/
+```
+
+## Test Coverage
+
+The tests cover the following functionality:
+
+1. **TourautoManager Class**:
+   - User preference management (enable/disable tourauto)
+   - Tour state tracking (seen/unseen tours)
+   - State clearing functionality
+   - Account-specific manager creation
+
+2. **Service Integration**:
+   - Service registration and availability
+   - Dependency injection
+   - User data storage
+
+3. **User Interface**:
+   - User form integration
+   - Form element presence and functionality
+   - Preference saving and loading
+
+4. **JavaScript Behavior**:
+   - JavaScript library loading
+   - DrupalSettings integration
+   - Debug information for administrators
+   - Tour module compatibility
+
+5. **Integration**:
+   - Tour detection and management
+   - Page bottom integration
+   - Cache handling
+
+## Test Dependencies
+
+The tests require the following modules:
+- `tour`: Core tour functionality
+- `tourauto`: The module under test
+- `user`: User management
+- `tourauto_test`: Test module providing tours
+
+## Notes
+
+- Tests follow Drupal coding standards
+- All tests are properly namespaced and grouped
+- Tests use appropriate base classes (UnitTestCase, KernelTestBase, BrowserTestBase, WebDriverTestBase)
+- Mock objects are used where appropriate for unit testing
+- Functional tests use real browser interactions
+- JavaScript tests verify client-side behavior 
\ No newline at end of file
diff --git a/modules/tourauto/tests/modules/tourauto_test/config/install/tour.tour.tourauto_test_tour.yml b/modules/tourauto/tests/modules/tourauto_test/config/install/tour.tour.tourauto_test_tour.yml
new file mode 100644
index 0000000..5114ced
--- /dev/null
+++ b/modules/tourauto/tests/modules/tourauto_test/config/install/tour.tour.tourauto_test_tour.yml
@@ -0,0 +1,18 @@
+langcode: en
+status: true
+dependencies:
+  module:
+    - tourauto_test
+id: tourauto_test_tour
+label: 'Tourauto Test Tour'
+module: tourauto_test
+routes:
+  - route_name: tourauto_test.page
+tips:
+  tourauto_test_tip_1:
+    id: tourauto_test_tip_1
+    plugin: text
+    label: 'Tourauto Test Tip 1'
+    body: 'This is a test tip for tourauto functionality.'
+    weight: 1
+    position: bottom 
diff --git a/modules/tourauto/tests/modules/tourauto_test/src/Controller/TourautoTestController.php b/modules/tourauto/tests/modules/tourauto_test/src/Controller/TourautoTestController.php
new file mode 100644
index 0000000..5416552
--- /dev/null
+++ b/modules/tourauto/tests/modules/tourauto_test/src/Controller/TourautoTestController.php
@@ -0,0 +1,30 @@
+<?php
+
+namespace Drupal\tourauto_test\Controller;
+
+use Drupal\Core\Controller\ControllerBase;
+
+/**
+ * Controller for tourauto test routes.
+ */
+class TourautoTestController extends ControllerBase {
+
+  /**
+   * Test page for tourauto functionality.
+   *
+   * @return array
+   *   A render array.
+   */
+  public function testPage(): array {
+    return [
+      '#type' => 'html_tag',
+      '#tag' => 'div',
+      '#value' => 'Tourauto test page with tour functionality.',
+      '#attributes' => [
+        'id' => 'tourauto-test-tip-1',
+        'class' => ['tourauto-test-element'],
+      ],
+    ];
+  }
+
+}
diff --git a/modules/tourauto/tests/modules/tourauto_test/tourauto_test.info.yml b/modules/tourauto/tests/modules/tourauto_test/tourauto_test.info.yml
new file mode 100644
index 0000000..3c269ac
--- /dev/null
+++ b/modules/tourauto/tests/modules/tourauto_test/tourauto_test.info.yml
@@ -0,0 +1,7 @@
+name: Tourauto Test
+type: module
+description: 'Test module for tourauto functionality.'
+core_version_requirement: ^9 || ^10 || ^11
+dependencies:
+  - tour
+  - tourauto 
diff --git a/modules/tourauto/tests/modules/tourauto_test/tourauto_test.routing.yml b/modules/tourauto/tests/modules/tourauto_test/tourauto_test.routing.yml
new file mode 100644
index 0000000..859d284
--- /dev/null
+++ b/modules/tourauto/tests/modules/tourauto_test/tourauto_test.routing.yml
@@ -0,0 +1,7 @@
+tourauto_test.page:
+  path: '/tourauto-test'
+  defaults:
+    _controller: '\Drupal\tourauto_test\Controller\TourautoTestController::testPage'
+    _title: 'Tourauto Test Page'
+  requirements:
+    _permission: 'access tour' 
diff --git a/modules/tourauto/tests/src/Functional/TourautoFunctionalTest.php b/modules/tourauto/tests/src/Functional/TourautoFunctionalTest.php
new file mode 100644
index 0000000..76a8afe
--- /dev/null
+++ b/modules/tourauto/tests/src/Functional/TourautoFunctionalTest.php
@@ -0,0 +1,144 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Tests\tourauto\Functional;
+
+use Drupal\Tests\BrowserTestBase;
+use Drupal\user\UserInterface;
+
+/**
+ * Tests the tourauto module functionality.
+ *
+ * @group tourauto
+ */
+class TourautoFunctionalTest extends BrowserTestBase {
+
+  /**
+   * Modules to enable.
+   *
+   * @var array
+   */
+  protected static $modules = ['tour', 'tourauto', 'user'];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $defaultTheme = 'stark';
+
+  /**
+   * A test user.
+   *
+   * @var \Drupal\user\UserInterface
+   */
+  protected UserInterface $user;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+
+    $this->user = $this->drupalCreateUser([
+      'access tour',
+      'administer users',
+    ]);
+  }
+
+  /**
+   * Tests that the tourauto form elements are present on user edit form.
+   */
+  public function testUserFormElements(): void {
+    $this->drupalLogin($this->user);
+
+    // Visit the user edit form.
+    $this->drupalGet('user/' . $this->user->id() . '/edit');
+
+    // Check that the tourauto form elements are present.
+    $this->assertSession()->fieldExists('tourauto_enable');
+    $this->assertSession()->fieldExists('tourauto_clear');
+
+    // Check that the fieldset is present.
+    $this->assertSession()->elementExists('css', 'details[data-drupal-selector="edit-tourauto"]');
+  }
+
+  /**
+   * Tests saving tourauto preferences.
+   */
+  public function testSaveTourautoPreferences(): void {
+    $this->drupalLogin($this->user);
+
+    // Visit the user edit form.
+    $this->drupalGet('user/' . $this->user->id() . '/edit');
+
+    // Uncheck the tourauto enable checkbox.
+    $this->getSession()->getPage()->uncheckField('tourauto_enable');
+
+    // Submit the form.
+    $this->getSession()->getPage()->pressButton('Save');
+
+    // Check that the form was submitted successfully.
+    $this->assertSession()->pageTextContains('The changes have been saved.');
+
+    // Verify the preference was saved by checking the form again.
+    $this->drupalGet('user/' . $this->user->id() . '/edit');
+    $this->assertSession()->checkboxNotChecked('tourauto_enable');
+  }
+
+  /**
+   * Tests clearing tour state.
+   */
+  public function testClearTourState(): void {
+    $this->drupalLogin($this->user);
+
+    // Visit the user edit form.
+    $this->drupalGet('user/' . $this->user->id() . '/edit');
+
+    // Check the clear state checkbox.
+    $this->getSession()->getPage()->checkField('tourauto_clear');
+
+    // Submit the form.
+    $this->getSession()->getPage()->pressButton('Save');
+
+    // Check that the form was submitted successfully.
+    $this->assertSession()->pageTextContains('The changes have been saved.');
+  }
+
+  /**
+   * Tests that tourauto settings are not available for anonymous users.
+   */
+  public function testAnonymousUserNoSettings(): void {
+    // Visit the user edit form as anonymous user.
+    $this->drupalGet('user/1/edit');
+
+    // Should be redirected to login.
+    $this->assertSession()->pageTextContains('Access denied');
+  }
+
+  /**
+   * Tests that tourauto JavaScript is loaded when enabled.
+   */
+  public function testTourautoJavaScriptLoaded(): void {
+    $this->drupalLogin($this->user);
+
+    // Visit a page with tours (admin page).
+    $this->drupalGet('admin');
+
+    // Check that tourauto JavaScript is loaded.
+    $this->assertSession()->responseContains('tourauto.js');
+  }
+
+  /**
+   * Tests that tourauto settings are available in user edit form.
+   */
+  public function testUserEditFormSettings(): void {
+    $this->drupalLogin($this->user);
+
+    // Visit the user edit form.
+    $this->drupalGet('user/' . $this->user->id() . '/edit');
+
+    // Check that the tourauto section is present.
+    $this->assertSession()->pageTextContains('Tours');
+  }
+
+}
diff --git a/modules/tourauto/tests/src/FunctionalJavascript/TourautoJavascriptTest.php b/modules/tourauto/tests/src/FunctionalJavascript/TourautoJavascriptTest.php
new file mode 100644
index 0000000..dd90a67
--- /dev/null
+++ b/modules/tourauto/tests/src/FunctionalJavascript/TourautoJavascriptTest.php
@@ -0,0 +1,144 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Tests\tourauto\FunctionalJavascript;
+
+use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+use Drupal\user\UserInterface;
+
+/**
+ * Tests the tourauto JavaScript functionality.
+ *
+ * @group tourauto
+ */
+class TourautoJavascriptTest extends WebDriverTestBase {
+
+  /**
+   * Modules to enable.
+   *
+   * @var array
+   */
+  protected static $modules = [
+    'tour',
+    'tourauto',
+    'user',
+    'tourauto_test',
+  ];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $defaultTheme = 'stark';
+
+  /**
+   * A test user.
+   *
+   * @var \Drupal\user\UserInterface
+   */
+  protected UserInterface $user;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+
+    $this->user = $this->drupalCreateUser([
+      'access tour',
+      'administer users',
+    ]);
+  }
+
+  /**
+   * Tests that tourauto JavaScript is loaded and initialized.
+   */
+  public function testTourautoJavaScriptLoaded(): void {
+    $this->drupalLogin($this->user);
+
+    // Visit a page with tours.
+    $this->drupalGet('tourauto-test');
+
+    // Check that tourauto JavaScript is loaded.
+    $this->assertSession()->responseContains('tourauto.js');
+
+    // Check that tourauto JavaScript is loaded.
+    $this->assertSession()->responseContains('tourauto.js');
+  }
+
+  /**
+   * Tests that tourauto settings are available in drupalSettings.
+   */
+  public function testTourautoSettingsInDrupalSettings(): void {
+    $this->drupalLogin($this->user);
+
+    // Visit a page with tours.
+    $this->drupalGet('tourauto-test');
+
+    // Check that tourauto settings are available in drupalSettings.
+    $this->assertSession()->responseContains('tourauto_open');
+  }
+
+  /**
+   * Tests that tourauto debug information is available for admin users.
+   */
+  public function testTourautoDebugInformation(): void {
+    $admin_user = $this->drupalCreateUser([
+      'access tour',
+      'administer site configuration',
+    ]);
+    $this->drupalLogin($admin_user);
+
+    // Visit a page with tours.
+    $this->drupalGet('tourauto-test');
+
+    // Check that debug information is available.
+    $this->assertSession()->responseContains('tourauto_debug');
+  }
+
+  /**
+   * Tests that tourauto does not interfere with normal tour functionality.
+   */
+  public function testTourautoDoesNotInterfereWithNormalTour(): void {
+    $this->drupalLogin($this->user);
+
+    // Visit a page with tours and tour parameter.
+    $this->drupalGet('tourauto-test', ['query' => ['tour' => 1]]);
+
+    // Check that tour is still functional.
+    $this->assertSession()->pageTextContains('Tourauto Test Tip 1');
+  }
+
+  /**
+   * Tests that tourauto respects user preferences.
+   */
+  public function testTourautoRespectsUserPreferences(): void {
+    $this->drupalLogin($this->user);
+
+    // Disable tourauto for the user.
+    $this->drupalGet('user/' . $this->user->id() . '/edit');
+    $this->getSession()->getPage()->uncheckField('tourauto_enable');
+    $this->getSession()->getPage()->pressButton('Save');
+
+    // Visit a page with tours.
+    $this->drupalGet('tourauto-test');
+
+    // Check that tourauto is not active.
+    $this->assertSession()->responseNotContains('tourauto_open');
+  }
+
+  /**
+   * Tests that tourauto works with tour module's JavaScript.
+   */
+  public function testTourautoWorksWithTourModule(): void {
+    $this->drupalLogin($this->user);
+
+    // Visit a page with tours.
+    $this->drupalGet('tourauto-test');
+
+    // Check that both tour and tourauto JavaScript are loaded.
+    $this->assertSession()->responseContains('tour.js');
+    $this->assertSession()->responseContains('tourauto.js');
+  }
+
+}
diff --git a/modules/tourauto/tests/src/Kernel/TourautoServiceTest.php b/modules/tourauto/tests/src/Kernel/TourautoServiceTest.php
new file mode 100644
index 0000000..db2e1a1
--- /dev/null
+++ b/modules/tourauto/tests/src/Kernel/TourautoServiceTest.php
@@ -0,0 +1,145 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Tests\tourauto\Kernel;
+
+use Drupal\KernelTests\KernelTestBase;
+use Drupal\tourauto\TourautoManager;
+use Drupal\user\UserInterface;
+
+/**
+ * Tests the tourauto service functionality.
+ *
+ * @group tourauto
+ */
+class TourautoServiceTest extends KernelTestBase {
+
+  /**
+   * Modules to enable.
+   *
+   * @var array
+   */
+  protected static $modules = ['tour', 'tourauto', 'user'];
+
+  /**
+   * The tourauto manager service.
+   *
+   * @var \Drupal\tourauto\TourautoManager
+   */
+  protected TourautoManager $manager;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+
+    $this->installEntitySchema('user');
+    $this->installEntitySchema('tour');
+    $this->installSchema('user', ['users_data']);
+    $this->installConfig(['tour']);
+
+    $this->manager = $this->container->get('tourauto.manager');
+  }
+
+  /**
+   * Tests that the tourauto manager service is available.
+   */
+  public function testServiceAvailable(): void {
+    $this->assertInstanceOf(TourautoManager::class, $this->manager);
+  }
+
+  /**
+   * Tests that the service can create managers for different accounts.
+   */
+  public function testGetManagerForAccount(): void {
+    $account = $this->createUser();
+    $manager_for_account = $this->manager->getManagerForAccount($account);
+
+    $this->assertInstanceOf(TourautoManager::class, $manager_for_account);
+    $this->assertNotSame($this->manager, $manager_for_account);
+  }
+
+  /**
+   * Tests default tourauto preference for new users.
+   */
+  public function testDefaultTourautoPreference(): void {
+    $account = $this->createUser();
+    $manager = $this->manager->getManagerForAccount($account);
+
+    // Default should be TRUE for users who haven't set a preference.
+    $this->assertTrue($manager->tourautoEnabled());
+  }
+
+  /**
+   * Tests setting and getting tourauto preference.
+   */
+  public function testTourautoPreference(): void {
+    $account = $this->createUser();
+    $manager = $this->manager->getManagerForAccount($account);
+
+    // Set preference to FALSE.
+    $manager->setTourautoPreference(FALSE);
+    $this->assertFalse($manager->tourautoEnabled());
+
+    // Set preference to TRUE.
+    $manager->setTourautoPreference(TRUE);
+    $this->assertTrue($manager->tourautoEnabled());
+  }
+
+  /**
+   * Tests tour state management.
+   */
+  public function testTourStateManagement(): void {
+    $account = $this->createUser();
+    $manager = $this->manager->getManagerForAccount($account);
+
+    // Initially no tours should be seen.
+    $this->assertEquals([], $manager->getSeenTours());
+
+    // Mark some tours as seen.
+    $manager->markToursSeen(['tour1', 'tour2']);
+    $this->assertEquals(['tour1', 'tour2'], $manager->getSeenTours());
+
+    // Clear the state.
+    $manager->clearState();
+    $this->assertEquals([], $manager->getSeenTours());
+  }
+
+  /**
+   * Tests that anonymous users cannot use tourauto.
+   */
+  public function testAnonymousUser(): void {
+    $anonymous = $this->createUser(['uid' => 0]);
+    $manager = $this->manager->getManagerForAccount($anonymous);
+
+    $this->assertFalse($manager->tourautoEnabled());
+  }
+
+  /**
+   * Helper method to create a test user.
+   *
+   * @param array $values
+   *   User values.
+   *
+   * @return \Drupal\user\UserInterface
+   *   The created user account.
+   */
+  protected function createUser(array $values = []): UserInterface {
+    $values += [
+      'name' => $this->randomMachineName(),
+      'mail' => $this->randomMachineName() . '@example.com',
+      'pass' => $this->randomMachineName(),
+      'status' => 1,
+    ];
+
+    $user = \Drupal::entityTypeManager()
+      ->getStorage('user')
+      ->create($values);
+    $user->save();
+
+    return $user;
+  }
+
+}
diff --git a/modules/tourauto/tests/src/Unit/TourautoManagerTest.php b/modules/tourauto/tests/src/Unit/TourautoManagerTest.php
new file mode 100644
index 0000000..1ee6a25
--- /dev/null
+++ b/modules/tourauto/tests/src/Unit/TourautoManagerTest.php
@@ -0,0 +1,224 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Tests\tourauto\Unit;
+
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslationInterface;
+use Drupal\tour\TourHelper;
+use Drupal\tourauto\TourautoManager;
+use Drupal\user\UserDataInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Tests\UnitTestCase;
+
+/**
+ * @coversDefaultClass \Drupal\tourauto\TourautoManager
+ *
+ * @group tourauto
+ */
+class TourautoManagerTest extends UnitTestCase {
+
+  /**
+   * The tourauto manager under test.
+   *
+   * @var \Drupal\tourauto\TourautoManager
+   */
+  protected TourautoManager $manager;
+
+  /**
+   * The mocked account.
+   *
+   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit\Framework\MockObject\MockObject
+   */
+  protected $account;
+
+  /**
+   * The mocked user data service.
+   *
+   * @var \Drupal\user\UserDataInterface|\PHPUnit\Framework\MockObject\MockObject
+   */
+  protected $userData;
+
+  /**
+   * The mocked route match service.
+   *
+   * @var \Drupal\Core\Routing\RouteMatchInterface|\PHPUnit\Framework\MockObject\MockObject
+   */
+  protected $routeMatch;
+
+  /**
+   * The mocked entity type manager.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
+   */
+  protected $entityTypeManager;
+
+  /**
+   * The mocked tour helper.
+   *
+   * @var \Drupal\tour\TourHelper|\PHPUnit\Framework\MockObject\MockObject
+   */
+  protected $tourHelper;
+
+  /**
+   * The mocked string translation service.
+   *
+   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit\Framework\MockObject\MockObject
+   */
+  protected $stringTranslation;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+
+    $this->account = $this->createMock(AccountInterface::class);
+    $this->userData = $this->createMock(UserDataInterface::class);
+    $this->routeMatch = $this->createMock(RouteMatchInterface::class);
+    $this->entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
+    $this->tourHelper = $this->createMock(TourHelper::class);
+    $this->stringTranslation = $this->createMock(TranslationInterface::class);
+
+    // Mock the tour storage and query.
+    $tourStorage = $this->createMock(EntityStorageInterface::class);
+    $tourQuery = $this->createMock(QueryInterface::class);
+
+    $tourQuery->method('accessCheck')->willReturnSelf();
+    $tourStorage->method('getQuery')->willReturn($tourQuery);
+    $this->entityTypeManager->method('getStorage')->with('tour')->willReturn($tourStorage);
+
+    $this->manager = new TourautoManager(
+      $this->account,
+      $this->userData,
+      $this->routeMatch,
+      $this->entityTypeManager,
+      $this->tourHelper,
+      $this->stringTranslation
+    );
+  }
+
+  /**
+   * @covers ::tourautoEnabled
+   */
+  public function testTourautoEnabledDefaultTrue(): void {
+    $this->account->method('id')->willReturn(1);
+    $this->userData->method('get')->willReturn(NULL);
+
+    $this->assertTrue($this->manager->tourautoEnabled());
+  }
+
+  /**
+   * @covers ::tourautoEnabled
+   */
+  public function testTourautoEnabledUserPreference(): void {
+    $this->account->method('id')->willReturn(1);
+    $this->userData->method('get')->willReturn(FALSE);
+
+    $this->assertFalse($this->manager->tourautoEnabled());
+  }
+
+  /**
+   * @covers ::tourautoEnabled
+   */
+  public function testTourautoEnabledAnonymousUser(): void {
+    $this->account->method('id')->willReturn(0);
+
+    $this->assertFalse($this->manager->tourautoEnabled());
+  }
+
+  /**
+   * @covers ::setTourautoPreference
+   */
+  public function testSetTourautoPreference(): void {
+    $this->account->method('id')->willReturn(1);
+    $this->userData->expects($this->once())
+      ->method('set')
+      ->with('tourauto', 1, 'tourauto_enable', TRUE);
+
+    $this->manager->setTourautoPreference(TRUE);
+  }
+
+  /**
+   * @covers ::setTourautoPreference
+   */
+  public function testSetTourautoPreferenceAnonymousUser(): void {
+    $this->account->method('id')->willReturn(0);
+    $this->userData->expects($this->never())->method('set');
+
+    $this->manager->setTourautoPreference(TRUE);
+  }
+
+  /**
+   * @covers ::getSeenTours
+   */
+  public function testGetSeenTours(): void {
+    $this->account->method('id')->willReturn(1);
+    $this->userData->method('get')->willReturn('{"seen": {"tour1": true, "tour2": true}}');
+
+    $expected = ['tour1', 'tour2'];
+    $this->assertEquals($expected, $this->manager->getSeenTours());
+  }
+
+  /**
+   * @covers ::getSeenTours
+   */
+  public function testGetSeenToursEmptyState(): void {
+    $this->account->method('id')->willReturn(1);
+    $this->userData->method('get')->willReturn(NULL);
+
+    $this->assertEquals([], $this->manager->getSeenTours());
+  }
+
+  /**
+   * @covers ::markToursSeen
+   */
+  public function testMarkToursSeen(): void {
+    $this->account->method('id')->willReturn(1);
+    $this->userData->method('get')->willReturn('{"seen": {"tour1": true}}');
+    $this->userData->expects($this->once())
+      ->method('set')
+      ->with('tourauto', 1, 'tourauto_state', '{"seen":{"tour1":true,"tour2":true,"tour3":true}}');
+
+    $this->manager->markToursSeen(['tour2', 'tour3']);
+  }
+
+  /**
+   * @covers ::clearState
+   */
+  public function testClearState(): void {
+    $this->account->method('id')->willReturn(1);
+    $this->userData->expects($this->once())
+      ->method('delete')
+      ->with('tourauto', 1, 'tourauto_state');
+
+    $this->manager->clearState();
+  }
+
+  /**
+   * @covers ::getManagerForAccount
+   */
+  public function testGetManagerForAccount(): void {
+    $newAccount = $this->createMock(AccountInterface::class);
+    $newAccount->method('id')->willReturn(2);
+
+    $newManager = $this->manager->getManagerForAccount($newAccount);
+
+    $this->assertInstanceOf(TourautoManager::class, $newManager);
+    $this->assertNotSame($this->manager, $newManager);
+  }
+
+  /**
+   * @covers ::translate
+   */
+  public function testTranslate(): void {
+    $result = $this->manager->translate('Test string');
+    $this->assertInstanceOf(TranslatableMarkup::class, $result);
+  }
+
+}
diff --git a/modules/tourauto/tourauto.info.yml b/modules/tourauto/tourauto.info.yml
new file mode 100644
index 0000000..8daf7a1
--- /dev/null
+++ b/modules/tourauto/tourauto.info.yml
@@ -0,0 +1,6 @@
+name: Tourauto
+type: module
+description: Lets tour authors choose whether their tour should open automatically.
+core_version_requirement: ^9 || ^10 || ^11
+dependencies:
+  - tour
diff --git a/modules/tourauto/tourauto.libraries.yml b/modules/tourauto/tourauto.libraries.yml
new file mode 100644
index 0000000..4036975
--- /dev/null
+++ b/modules/tourauto/tourauto.libraries.yml
@@ -0,0 +1,6 @@
+tourauto:
+  js:
+    js/tourauto.js: {}
+  dependencies:
+    - core/once
+    - tour/tour
diff --git a/modules/tourauto/tourauto.module b/modules/tourauto/tourauto.module
new file mode 100644
index 0000000..1b3e797
--- /dev/null
+++ b/modules/tourauto/tourauto.module
@@ -0,0 +1,106 @@
+<?php
+
+/**
+ * @file
+ * Provides hooks and integrations for the Tourauto module.
+ */
+
+use Drupal\Core\Session\AccountInterface;
+use Drupal\tourauto\TourautoManager;
+use Drupal\user\Entity\User;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Implements hook_form_FORM_ID_alter() for user_form.
+ */
+function tourauto_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
+  $account = $form_state->getBuildInfo()['callback_object']->getEntity();
+  $manager = \Drupal::service('tourauto.manager')->getManagerForAccount($account);
+  assert($account instanceof AccountInterface);
+  assert($manager instanceof TourautoManager);
+
+  $form['tourauto'] = [
+    '#type' => 'details',
+    '#title' => $manager->translate('Tours'),
+    '#open' => TRUE,
+  ];
+  $form['tourauto']['tourauto_enable'] = [
+    '#type' => 'checkbox',
+    '#title' => 'Open tours automatically',
+    '#default_value' => $manager->tourautoEnabled(),
+  ];
+  $form['tourauto']['tourauto_clear'] = [
+    '#type' => 'checkbox',
+    '#title' => 'Clear status (mark all tours as unseen)',
+    '#default_value' => FALSE,
+  ];
+  array_unshift($form['actions']['submit']['#submit'], '_tourauto_user_form_submit');
+}
+
+/**
+ * Helper function that saves user's tourauto data.
+ */
+function _tourauto_user_form_submit(&$form, FormStateInterface $form_state) {
+  $account = $form_state->getBuildInfo()['callback_object']->getEntity();
+  $manager = \Drupal::service('tourauto.manager')->getManagerForAccount($account);
+  assert($account instanceof AccountInterface);
+  assert($manager instanceof TourautoManager);
+
+  $enable = $form_state->getValue('tourauto_enable');
+  $manager->setTourautoPreference($enable);
+
+  $clear = $form_state->getValue('tourauto_clear');
+  if ($clear) {
+    $manager->clearState();
+  }
+}
+
+/**
+ * Implements hook_page_bottom().
+ */
+function tourauto_page_bottom(array &$page_bottom) {
+  $build = [];
+  $manager = \Drupal::service('tourauto.manager');
+  assert($manager instanceof TourautoManager);
+
+  if ($manager->tourautoEnabled()) {
+    $tours = $manager->getCurrentTours();
+
+    // Determine if there are any tours on this page that the user hasn't seen.
+    $available = array_keys($tours);
+    $seen = $manager->getSeenTours();
+    $new_tours = array_diff($available, $seen);
+    $should_open = (count($new_tours) > 0);
+
+    // Update the user's profile to show they've seen the tours on this page.
+    $manager->markToursSeen($new_tours);
+
+    // Let the client know whether it should pop open the tour window.
+    $build['#attached']['drupalSettings']['tourauto_open'] = $should_open;
+    $build['#attached']['library'][] = 'tourauto/tourauto';
+
+    // Add debugging information.
+    if (\Drupal::currentUser()->hasPermission('administer site configuration')) {
+      $build['#attached']['drupalSettings']['tourauto_debug'] = [
+        'enabled' => $manager->tourautoEnabled(),
+        'available_tours' => $available,
+        'seen_tours' => $seen,
+        'new_tours' => $new_tours,
+        'should_open' => $should_open,
+        'route' => \Drupal::routeMatch()->getRouteName(),
+        'tour_count' => count($tours),
+        'available_count' => count($available),
+        'seen_count' => count($seen),
+        'new_count' => count($new_tours),
+      ];
+    }
+  }
+
+  // The results of all this logic depend on the current page's tours...
+  $build['#cache'] = $page_bottom['tour']['#cache'] ?? [];
+  // And also on the current user.
+  $build['#cache']['contexts'][] = 'user';
+  \Drupal::service('renderer')->addCacheableDependency($build, User::load(\Drupal::currentUser()->id()));
+
+  $page_bottom['tourauto'] = $build;
+}
diff --git a/modules/tourauto/tourauto.services.yml b/modules/tourauto/tourauto.services.yml
new file mode 100644
index 0000000..edb9fc4
--- /dev/null
+++ b/modules/tourauto/tourauto.services.yml
@@ -0,0 +1,4 @@
+services:
+  tourauto.manager:
+    class: Drupal\tourauto\TourautoManager
+    arguments: ['@current_user', '@user.data', '@current_route_match', '@entity_type.manager', '@tour.helper', '@string_translation']
diff --git a/phpcs.xml.dist b/phpcs.xml.dist
new file mode 100644
index 0000000..7542b2d
--- /dev/null
+++ b/phpcs.xml.dist
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ruleset name="drupal-contrib-project">
+  <!-- Change the name and description if you copy this file to your project to make customizations. -->
+  <description>Default PHP CodeSniffer configuration for a Drupal contrib project.</description>
+
+  <!-- Include all rules in the Drupal ruleset. -->
+  <rule ref="Drupal"/>
+
+  <!-- Include all rules in the DrupalPractice ruleset. Uncomment if required -->
+  <!-- <rule ref="DrupalPractice"/> -->
+
+  <!-- Keep the extensions in alphabetic order like Core. -->
+  <arg name="extensions" value="engine,inc,info,install,module,php,profile,test,theme,yml"/>
+
+</ruleset>
diff --git a/phpstan-baseline.neon b/phpstan-baseline.neon
new file mode 100644
index 0000000..e69de29
diff --git a/tests/src/Functional/TourTest.php b/tests/src/Functional/TourTest.php
index b253ba2..7edcb3c 100644
--- a/tests/src/Functional/TourTest.php
+++ b/tests/src/Functional/TourTest.php
@@ -157,7 +157,7 @@ public function testTourFunctionality(): void {
         ['route_name' => 'tour_test.1'],
       ],
       'tips' => [
-        'tour-test-1' => [
+        'tour-code-test-1' => [
           'id' => 'tour-code-test-1',
           'plugin' => 'text',
           'label' => 'The rain in spain is <strong>strong</strong>',

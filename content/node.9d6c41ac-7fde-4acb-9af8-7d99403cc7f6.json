{
    "uuid": [
        {
            "value": "9d6c41ac-7fde-4acb-9af8-7d99403cc7f6"
        }
    ],
    "langcode": [
        {
            "value": "en"
        }
    ],
    "type": [
        {
            "target_id": "blog",
            "target_type": "node_type",
            "target_uuid": "5e1cc3ac-5c8f-4194-a7db-a96757398273"
        }
    ],
    "revision_timestamp": [
        {
            "value": "2024-12-16T23:06:46+00:00"
        }
    ],
    "revision_uid": [
        {
            "target_type": "user",
            "target_uuid": "711eae9d-1ca7-45a3-a4b1-9f1e585e1f33"
        }
    ],
    "revision_log": [],
    "status": [
        {
            "value": true
        }
    ],
    "uid": [
        {
            "target_type": "user",
            "target_uuid": "711eae9d-1ca7-45a3-a4b1-9f1e585e1f33"
        }
    ],
    "title": [
        {
            "value": "Chasing Core: Why the Drupal 8.7 Update Was So Difficult"
        }
    ],
    "created": [
        {
            "value": "2019-06-28T07:00:00+00:00"
        }
    ],
    "changed": [
        {
            "value": "2024-12-16T23:06:46+00:00"
        }
    ],
    "promote": [
        {
            "value": true
        }
    ],
    "sticky": [
        {
            "value": false
        }
    ],
    "default_langcode": [
        {
            "value": true
        }
    ],
    "revision_translation_affected": [
        {
            "value": true
        }
    ],
    "path": [
        {
            "alias": "\/2019\/06\/28\/chasing-core-drupal-8-7-update-difficult",
            "langcode": "en"
        }
    ],
    "body": [
        {
            "value": "<p>Drupal 8.7 was released nearly two months ago and it took me that long to upgrade a complex site. Well\u2026 I should say it took me about 40 hours of research and development time. I worked on other things during the numerous local rebuilds it took. I am not proud of how long it took, but I am pretty impressed that I figured it out. I think I tried about 10 different approaches before I landed on the magic combination.<\/p><p>So why is chasing Drupal Core to the 8.7 update so difficult? A normal update to core is as simple as <code class=\"language-plaintext highlighter-rouge\">composer update<\/code> followed by <code class=\"language-plaintext highlighter-rouge\">drush updb<\/code> and a cache clear (<code class=\"language-plaintext highlighter-rouge\">drush cr<\/code>). The challenge of this upgrade comes down to three things.<\/p><h2 id=\"i-let-the-configuration-become-too-complex\">I let the configuration become too complex<\/h2><p>It happens to all of us that work in Drupal long enough. We start a new team on a new project that is big and complex and we teach them to Drupal along the way. In the process, one developer adds a module for this and another adds a module for that.<\/p><p>We started with Acquia Lightning, but our approach has bloated along the way to include modules like Groups (Organic Groups wasn\u2019t ready yet), Paragraphs (Layout Builder wasn\u2019t ready yet), Display Suite (Layout Builder doesn\u2019t really do this), Content Lock, migrations, Solr Search API (which we have to fool composer to load a more modern version than what Acquia uses), Webform, and more.<\/p><p>On their own, these are all amazing tools to have when building a complex site. But suddenly\u2014as if it happened overnight, ha\u2014our <code class=\"language-plaintext highlighter-rouge\">composer.json<\/code> file is huge and there are patches galore.<\/p><h3 id=\"speaking-of-patches\">Speaking of patches<\/h3><p>It might be a good rule of thumb to limit your total patches to no more than twice the years you have worked with Drupal 8. Patches are amazing as they allow you to add a fix that is coming in the future with very little effort. The problem is that a patch is a promise of how code will be added to files in the future. Changes accepted before the patch in that future release can make the patch no longer apply.<\/p><p>As a developer in Composer world, if you apply too many patches, you will spend a lot of time rerolling patches in the Drupal issue queue\u2014or grabbing it from others when they beat you to it.<\/p><p>When possible, you should only use a patch that you know is committed to the next version so that you can safely remove that patch upon upgrade. Let\u2019s face it. If you have a big project that needs the patch. You are going to patch away anyway.<\/p><h3 id=\"configuration-is-everywhere\">Configuration is everywhere<\/h3><p>Every edit you make to an entity type (content node, taxonomy term, menu item, etc.) changes a configuration file. In the site we upgraded, I had 1,499 configuration files. (And that is not counting configuration splits for preproduction and production environments.)<\/p><p>Configuration is awesome when it helps you keep your database in sync, but it can be a nightmare when something is corrupted or a schema changes.<\/p><h3 id=\"composer-will-try-to-update-everything\">Composer will try to update everything<\/h3><p>Dependency management is pretty amazing. When I built up the team at the Drupal Association to support Drupal.org, it became apparent pretty quickly that if we wanted Drupal 8 to succeed, we needed Composer integration to succeed.<\/p><p>Composer is amazing at what it does, but I would not say that it is easy to understand all the inner workings. You have to understand semantic versioning (semver) deeply to have success with Composer.<\/p><p>When everyone in your dependency tree is doing their job, and your <code class=\"language-plaintext highlighter-rouge\">composer.json<\/code> is well structured, running <code class=\"language-plaintext highlighter-rouge\">composer update<\/code> will give you all the new stuff you need from Drupal and all its dependencies as well as put your contributed dependencies into an easily understandable directory structure that sorts code from others and the code you have customized in your git repo.<\/p><p>I found that this particular Drupal update needed as few concurrent upgrades running as possible. That meant pinning Lightning to the 3.x release (`composer require acquia\/lightning:^3.2), as well as updating a lot of underlying modules like Entity Views Attach, Field Defaults, Easy Breadcrumb, and getting core up to the latest release of 8.6.17.<\/p><p>If it hadn\u2019t been for this gem of a <a href=\"https:\/\/www.previousnext.com.au\/blog\/patch-drupal-core-without-things-ending-up-corecore-or-coreb\">blog post<\/a>, I don\u2019t think everything would have updated cleanly to Drupal 8.6.17 because a couple of my patches were writing to <code class=\"language-plaintext highlighter-rouge\">core\/core<\/code> instead of just <code class=\"language-plaintext highlighter-rouge\">core<\/code>.<\/p><p>I should also note that the final build required that I <a href=\"https:\/\/www.drupal.org\/project\/lightning\/issues\/3056074\">pin our version of Lightning Layout per a known issue<\/a> as well as stick Search API Page (<code class=\"language-plaintext highlighter-rouge\">composer require drupal\/search_api_page:1.0.0-alpha12<\/code>) and the Groups module (<code class=\"language-plaintext highlighter-rouge\">composer require drupal\/group:1.0.0-rc2<\/code>). It is not that either of those modules are a hard dependency, but their upgrades were failing for other reasons and I wan\u2019t to isolate the Drupal 8.7 upgrade as much as possible.<\/p><h2 id=\"core-decided-to-add-revisioning-to-taxonomy-terms-and-menu-links\">Core decided to add revisioning to taxonomy terms and menu links<\/h2><p>I\u2019m actually okay with the decision. If I had it my way, every entity in Drupal would just be an entity with all the same field and workflow options. Let me publish and unpublish all the things!<\/p><p>The approach was solid, but the ability to apply that approach is heavily dependent on a fairly simple Drupal installation. Tests can only uncover so much. As a result, there are a significant number of sites that have struggled to upgrade with issues like:<\/p><ul>  <li><a href=\"https:\/\/www.drupal.org\/project\/drupal\/issues\/3052204\">Unable to update Drupal 8.6 to Drupal 8.7; Field storage definition for \u2018type\u2019 could not be found in file_update_8700()<\/a><\/li>  <li><a href=\"https:\/\/www.drupal.org\/project\/drupal\/issues\/3052318\">update from 8.6.15 to 8.7 fails due to menu_link_content<\/a><\/li>  <li><a href=\"https:\/\/www.drupal.org\/project\/drupal\/issues\/3039586\">Cannot rename tmp_2362aemenu_link_content_revision to menu_link_content_revision<\/a><\/li>  <li><a href=\"https:\/\/www.drupal.org\/project\/drupal\/issues\/3052464\">Cannot update to 8.7.0 because of taxonomy_post_update_make_taxonomy_term_revisionable<\/a><\/li><\/ul><p>I have been following these issues, and more, over the past month to figure out what exactly was causing database updates to fail on my attempts to upgrade.<\/p><p>Solutions to the corrupted tables ranged from writing custom modules with update hooks to unset configuration that was in conflict to database queries to remove tables or add fields manually. I\u2019m not a big fan of altering a Drupal database under anything other than extreme circumstances. The abstraction that makes Drupal so powerful for configuration and site building also makes it incredibly complex. Any database change made without absolute understanding of the complex joins that will be made for entities or views is fraught with danger.<\/p><p>So how did I manage to fix this mess without touching anything more than a composer.json and updating a couple of views. The short answer is that I had three patches in place that conflicted with the entity update code that was a part of the changes that added revisioning to taxonomy terms and menu items.<\/p><p>The first, <a href=\"https:\/\/www.drupal.org\/project\/drupal\/issues\/2953331\">Add a views sort handler for sorting content by moderation state<\/a>, I decided we didn\u2019t need. Sorting by moderation state is an administrative task of questionable value. You might group by moderation state or filter by moderation state, but do you really need to sort. So I removed that patch and updated the 5 administrative views with tables that were trying to sort by moderation state. These changes were all in the table settings for that view display.<\/p><p>The next two issues, <a href=\"https:\/\/www.drupal.org\/project\/drupal\/issues\/2797583\">Dynamically provide action plugins for every moderation state change<\/a> and <a href=\"https:\/\/www.drupal.org\/project\/drupal\/issues\/2174633\">View output is not used for entityreference options<\/a>, were code that we needed. However, Drupal 8.6 needed the code in a different place than in Drupal 8.7. (See the patches problem statement above.) Because this update required multiple builds that ran all the way from local to multidev to dev to test to live, I had to modify the composer.json file to have a different patch when updating Lighting 3.2.x than from updating Lighting 4.0.x.<\/p><h2 id=\"order-of-operations-in-automated-builds-is-very-important\">Order of operations in automated builds is very important<\/h2><p>One of the developers on the team at the City of Portland took a zsh alias that I had set up and turned it into a really slick little bit of tooling in our <code class=\"language-plaintext highlighter-rouge\">lando.yml<\/code>. I really pretty heavily on these Lando commands to make sure that we don\u2019t forget a command when we are setting up a local environment for a successful build.<\/p><p>This upgrade was particularly challenging as it has a pretty critical list of updates that require a configuration export <strong>after<\/strong> the updates are complete. This made me reconsider my scripts\u2026 which I will now provide here for those that might want to incorporate this into their Drupal workflow.<\/p><p>I also use Oh My Zsh with some Git shorthand to reduce my typing. I\u2019ll provide the full commands alongside.<\/p><h3 id=\"starting-a-new-branch-from-master\">Starting a new branch from master<\/h3><ol>  <li><code class=\"language-plaintext highlighter-rouge\">gco master<\/code> (<code class=\"language-plaintext highlighter-rouge\">git checkout master<\/code>)<\/li>  <li><code class=\"language-plaintext highlighter-rouge\">lando latest<\/code> (The following commands run from the project root.)    <ol>      <li><code class=\"language-plaintext highlighter-rouge\">mkdir -p \/app\/artifacts<\/code><\/li>      <li><code class=\"language-plaintext highlighter-rouge\">rm -f \/app\/artifacts\/database.tar.gz<\/code><\/li>      <li><code class=\"language-plaintext highlighter-rouge\">terminus backup:get portlandor.dev --element=database --to=\/app\/artifacts\/database.tar.gz<\/code> (We use Pantheon for our hosting, but all the big Drupal hosts have similar commands you can run.)<\/li>      <li><code class=\"language-plaintext highlighter-rouge\">database: cd \/app &amp;&amp; \/helpers\/sql-import.sh artifacts\/database.tar.gz<\/code><\/li>      <li><code class=\"language-plaintext highlighter-rouge\">drush cr -y<\/code><\/li>    <\/ol>  <\/li>  <li><code class=\"language-plaintext highlighter-rouge\">lando refresh<\/code> (This command gives us a clean starting point with our database.)    <ol>      <li><code class=\"language-plaintext highlighter-rouge\">composer install<\/code><\/li>      <li><code class=\"language-plaintext highlighter-rouge\">drush cr -y<\/code><\/li>      <li><code class=\"language-plaintext highlighter-rouge\">drush updb -y<\/code><\/li>      <li><code class=\"language-plaintext highlighter-rouge\">drush cim -y<\/code><\/li>      <li><code class=\"language-plaintext highlighter-rouge\">drush core:cron -y<\/code><\/li>      <li><code class=\"language-plaintext highlighter-rouge\">drush cr -y<\/code><\/li>      <li><code class=\"language-plaintext highlighter-rouge\">npm -C \/app\/web\/themes\/custom\/$theme run build:dev<\/code> (This last command will vary depending on whether you compile your theme with something like Webpack or Gulp.)<\/li>    <\/ol>  <\/li><\/ol><p>You can see why we turned these into commands. I can\u2019t tell you how many times I have seen one of these steps skipped and the resulting build just fails. Usually from a configuration conflict or an entity update that didn\u2019t happen as it should.<\/p><h3 id=\"once-you-have-updated-your-composerjson\">Once you have updated your composer.json<\/h3><ol>  <li><code class=\"language-plaintext highlighter-rouge\">lando cupex<\/code> (This is kinda a goofy little shorthand I came up.)    <ol>      <li><code class=\"language-plaintext highlighter-rouge\">composer update<\/code> (Yes, I just update it all and I do so pretty regularly.)<\/li>      <li><code class=\"language-plaintext highlighter-rouge\">drush updb -y<\/code> (Runs all your update and post-update hooks which changes the database.)<\/li>      <li><code class=\"language-plaintext highlighter-rouge\">drush cex -y<\/code> (This is the shorthand for config-export and it takes all those database changes and writes them to config.)<\/li>    <\/ol>  <\/li>  <li><code class=\"language-plaintext highlighter-rouge\">gaa<\/code> (<code class=\"language-plaintext highlighter-rouge\">git add -A<\/code> is my preferred way to deal with automation like this as it just grabs every change and I can see those changes in my editor.)<\/li>  <li><code class=\"language-plaintext highlighter-rouge\">gcmsg \"My commit message\"<\/code> (This command is so much less verbose and easier to type than <code class=\"language-plaintext highlighter-rouge\">git commit -m \"My commit message\"<\/code>. We include our Jira issue IDs in the message to tie it all back to our sprint board.)<\/li>  <li><code class=\"language-plaintext highlighter-rouge\">git push -u origin $branch-id<\/code> (I think there is shorthand for this that I just haven\u2019t taken the time to learn. Yeah\u2026 me too.)<\/li><\/ol><p>And here is where the magic happens and we let our GitHub and CircleCI integration take over and build our multidev environment for automated (Behat) and manual testing. QA still catches a lot, so we haven\u2019t stopped doing it. Our CircleCI scripts are pretty much using the same set of commands to build our artifacts that get pushed to our servers on Pantheon.<\/p><h2 id=\"it-took-six-smaller-builds-to-finally-get-to-87\">It took six smaller builds to finally get to 8.7<\/h2><p>You read that correct. I had to incrementally update a lot of \u201csmall\u201d things and get all those patches to apply cleanly before the final build would give me a site that had no errors and passing tests. That means I had to repeat the \u201c<em>latest<\/em> &gt; <em>refresh<\/em> &gt; <em>change some things<\/em> &gt; <em>cupex<\/em> &gt; <em>push to origin<\/em>\u201d over and over. Developing in PHP is so much like developing in Javascript now! Write some recipes and compile! Sigh.<\/p><p>Funny story\u2026 after working on this upgrade off an on for a month, and having a build that worked in our dev site, our build process was halted by a system outage upstream.  <code class=\"language-plaintext highlighter-rouge\">\u00af\\_(\u30c4)_\/\u00af<\/code>.<\/p><h2 id=\"was-it-worth-it\">Was it worth it<\/h2><p>In truth, yes. I learned a lot about Drupal 8 in this process. Over the last year of this project with the City of Portland, I have learned just how much of my D7 and D6 knowledge applies and just how much does not. I am much more intimately aware of some of the subsystems now than I was before\u2014even if I still don\u2019t consider myself much of a true PHP developer as much as a really advanced site builder with some frontend chops.<\/p><p>Drupal 8.7 has several cool new features that make it worth trying. In fact, on a clean install, I found a lot to love by grabbing Lightning 4\u2014released on May 16\u2014and adding a minimal amount of configuration.<\/p><p>Chasing core and staying up to date with your dependencies as feasible is important with Drupal. In truth, this is important with any software now as dependency management and compiling a lot of a code written by a lot of different people is a must to build the complex tools that we try to make look simple to the people that use our software.<\/p><p>Did I get any of the above completely wrong? Have a question I didn\u2019t answer? Hit me up in the comments. I haven\u2019t seen a comment in months.<\/p>",
            "format": "content_format",
            "processed": "<p>Drupal 8.7 was released nearly two months ago and it took me that long to upgrade a complex site. Well\u2026 I should say it took me about 40 hours of research and development time. I worked on other things during the numerous local rebuilds it took. I am not proud of how long it took, but I am pretty impressed that I figured it out. I think I tried about 10 different approaches before I landed on the magic combination.<\/p>\n<p>So why is chasing Drupal Core to the 8.7 update so difficult? A normal update to core is as simple as <code class=\"language-plaintext highlighter-rouge\">composer update<\/code> followed by <code class=\"language-plaintext highlighter-rouge\">drush updb<\/code> and a cache clear (<code class=\"language-plaintext highlighter-rouge\">drush cr<\/code>). The challenge of this upgrade comes down to three things.<\/p>\n<h2 id=\"i-let-the-configuration-become-too-complex\">I let the configuration become too complex<\/h2>\n<p>It happens to all of us that work in Drupal long enough. We start a new team on a new project that is big and complex and we teach them to Drupal along the way. In the process, one developer adds a module for this and another adds a module for that.<\/p>\n<p>We started with Acquia Lightning, but our approach has bloated along the way to include modules like Groups (Organic Groups wasn\u2019t ready yet), Paragraphs (Layout Builder wasn\u2019t ready yet), Display Suite (Layout Builder doesn\u2019t really do this), Content Lock, migrations, Solr Search API (which we have to fool composer to load a more modern version than what Acquia uses), Webform, and more.<\/p>\n<p>On their own, these are all amazing tools to have when building a complex site. But suddenly\u2014as if it happened overnight, ha\u2014our <code class=\"language-plaintext highlighter-rouge\">composer.json<\/code> file is huge and there are patches galore.<\/p>\n<h3 id=\"speaking-of-patches\">Speaking of patches<\/h3>\n<p>It might be a good rule of thumb to limit your total patches to no more than twice the years you have worked with Drupal 8. Patches are amazing as they allow you to add a fix that is coming in the future with very little effort. The problem is that a patch is a promise of how code will be added to files in the future. Changes accepted before the patch in that future release can make the patch no longer apply.<\/p>\n<p>As a developer in Composer world, if you apply too many patches, you will spend a lot of time rerolling patches in the Drupal issue queue\u2014or grabbing it from others when they beat you to it.<\/p>\n<p>When possible, you should only use a patch that you know is committed to the next version so that you can safely remove that patch upon upgrade. Let\u2019s face it. If you have a big project that needs the patch. You are going to patch away anyway.<\/p>\n<h3 id=\"configuration-is-everywhere\">Configuration is everywhere<\/h3>\n<p>Every edit you make to an entity type (content node, taxonomy term, menu item, etc.) changes a configuration file. In the site we upgraded, I had 1,499 configuration files. (And that is not counting configuration splits for preproduction and production environments.)<\/p>\n<p>Configuration is awesome when it helps you keep your database in sync, but it can be a nightmare when something is corrupted or a schema changes.<\/p>\n<h3 id=\"composer-will-try-to-update-everything\">Composer will try to update everything<\/h3>\n<p>Dependency management is pretty amazing. When I built up the team at the Drupal Association to support Drupal.org, it became apparent pretty quickly that if we wanted Drupal 8 to succeed, we needed Composer integration to succeed.<\/p>\n<p>Composer is amazing at what it does, but I would not say that it is easy to understand all the inner workings. You have to understand semantic versioning (semver) deeply to have success with Composer.<\/p>\n<p>When everyone in your dependency tree is doing their job, and your <code class=\"language-plaintext highlighter-rouge\">composer.json<\/code> is well structured, running <code class=\"language-plaintext highlighter-rouge\">composer update<\/code> will give you all the new stuff you need from Drupal and all its dependencies as well as put your contributed dependencies into an easily understandable directory structure that sorts code from others and the code you have customized in your git repo.<\/p>\n<p>I found that this particular Drupal update needed as few concurrent upgrades running as possible. That meant pinning Lightning to the 3.x release (`composer require acquia\/lightning:^3.2), as well as updating a lot of underlying modules like Entity Views Attach, Field Defaults, Easy Breadcrumb, and getting core up to the latest release of 8.6.17.<\/p>\n<p>If it hadn\u2019t been for this gem of a <a href=\"https:\/\/www.previousnext.com.au\/blog\/patch-drupal-core-without-things-ending-up-corecore-or-coreb\">blog post<\/a>, I don\u2019t think everything would have updated cleanly to Drupal 8.6.17 because a couple of my patches were writing to <code class=\"language-plaintext highlighter-rouge\">core\/core<\/code> instead of just <code class=\"language-plaintext highlighter-rouge\">core<\/code>.<\/p>\n<p>I should also note that the final build required that I <a href=\"https:\/\/www.drupal.org\/project\/lightning\/issues\/3056074\">pin our version of Lightning Layout per a known issue<\/a> as well as stick Search API Page (<code class=\"language-plaintext highlighter-rouge\">composer require drupal\/search_api_page:1.0.0-alpha12<\/code>) and the Groups module (<code class=\"language-plaintext highlighter-rouge\">composer require drupal\/group:1.0.0-rc2<\/code>). It is not that either of those modules are a hard dependency, but their upgrades were failing for other reasons and I wan\u2019t to isolate the Drupal 8.7 upgrade as much as possible.<\/p>\n<h2 id=\"core-decided-to-add-revisioning-to-taxonomy-terms-and-menu-links\">Core decided to add revisioning to taxonomy terms and menu links<\/h2>\n<p>I\u2019m actually okay with the decision. If I had it my way, every entity in Drupal would just be an entity with all the same field and workflow options. Let me publish and unpublish all the things!<\/p>\n<p>The approach was solid, but the ability to apply that approach is heavily dependent on a fairly simple Drupal installation. Tests can only uncover so much. As a result, there are a significant number of sites that have struggled to upgrade with issues like:<\/p>\n<ul>\n<li><a href=\"https:\/\/www.drupal.org\/project\/drupal\/issues\/3052204\">Unable to update Drupal 8.6 to Drupal 8.7; Field storage definition for \u2018type\u2019 could not be found in file_update_8700()<\/a><\/li>\n<li><a href=\"https:\/\/www.drupal.org\/project\/drupal\/issues\/3052318\">update from 8.6.15 to 8.7 fails due to menu_link_content<\/a><\/li>\n<li><a href=\"https:\/\/www.drupal.org\/project\/drupal\/issues\/3039586\">Cannot rename tmp_2362aemenu_link_content_revision to menu_link_content_revision<\/a><\/li>\n<li><a href=\"https:\/\/www.drupal.org\/project\/drupal\/issues\/3052464\">Cannot update to 8.7.0 because of taxonomy_post_update_make_taxonomy_term_revisionable<\/a><\/li>\n<\/ul>\n<p>I have been following these issues, and more, over the past month to figure out what exactly was causing database updates to fail on my attempts to upgrade.<\/p>\n<p>Solutions to the corrupted tables ranged from writing custom modules with update hooks to unset configuration that was in conflict to database queries to remove tables or add fields manually. I\u2019m not a big fan of altering a Drupal database under anything other than extreme circumstances. The abstraction that makes Drupal so powerful for configuration and site building also makes it incredibly complex. Any database change made without absolute understanding of the complex joins that will be made for entities or views is fraught with danger.<\/p>\n<p>So how did I manage to fix this mess without touching anything more than a composer.json and updating a couple of views. The short answer is that I had three patches in place that conflicted with the entity update code that was a part of the changes that added revisioning to taxonomy terms and menu items.<\/p>\n<p>The first, <a href=\"https:\/\/www.drupal.org\/project\/drupal\/issues\/2953331\">Add a views sort handler for sorting content by moderation state<\/a>, I decided we didn\u2019t need. Sorting by moderation state is an administrative task of questionable value. You might group by moderation state or filter by moderation state, but do you really need to sort. So I removed that patch and updated the 5 administrative views with tables that were trying to sort by moderation state. These changes were all in the table settings for that view display.<\/p>\n<p>The next two issues, <a href=\"https:\/\/www.drupal.org\/project\/drupal\/issues\/2797583\">Dynamically provide action plugins for every moderation state change<\/a> and <a href=\"https:\/\/www.drupal.org\/project\/drupal\/issues\/2174633\">View output is not used for entityreference options<\/a>, were code that we needed. However, Drupal 8.6 needed the code in a different place than in Drupal 8.7. (See the patches problem statement above.) Because this update required multiple builds that ran all the way from local to multidev to dev to test to live, I had to modify the composer.json file to have a different patch when updating Lighting 3.2.x than from updating Lighting 4.0.x.<\/p>\n<h2 id=\"order-of-operations-in-automated-builds-is-very-important\">Order of operations in automated builds is very important<\/h2>\n<p>One of the developers on the team at the City of Portland took a zsh alias that I had set up and turned it into a really slick little bit of tooling in our <code class=\"language-plaintext highlighter-rouge\">lando.yml<\/code>. I really pretty heavily on these Lando commands to make sure that we don\u2019t forget a command when we are setting up a local environment for a successful build.<\/p>\n<p>This upgrade was particularly challenging as it has a pretty critical list of updates that require a configuration export <strong>after<\/strong> the updates are complete. This made me reconsider my scripts\u2026 which I will now provide here for those that might want to incorporate this into their Drupal workflow.<\/p>\n<p>I also use Oh My Zsh with some Git shorthand to reduce my typing. I\u2019ll provide the full commands alongside.<\/p>\n<h3 id=\"starting-a-new-branch-from-master\">Starting a new branch from master<\/h3>\n<ol>\n<li><code class=\"language-plaintext highlighter-rouge\">gco master<\/code> (<code class=\"language-plaintext highlighter-rouge\">git checkout master<\/code>)<\/li>\n<li><code class=\"language-plaintext highlighter-rouge\">lando latest<\/code> (The following commands run from the project root.)\n<ol>\n<li><code class=\"language-plaintext highlighter-rouge\">mkdir -p \/app\/artifacts<\/code><\/li>\n<li><code class=\"language-plaintext highlighter-rouge\">rm -f \/app\/artifacts\/database.tar.gz<\/code><\/li>\n<li><code class=\"language-plaintext highlighter-rouge\">terminus backup:get portlandor.dev --element=database --to=\/app\/artifacts\/database.tar.gz<\/code> (We use Pantheon for our hosting, but all the big Drupal hosts have similar commands you can run.)<\/li>\n<li><code class=\"language-plaintext highlighter-rouge\">database: cd \/app &amp;&amp; \/helpers\/sql-import.sh artifacts\/database.tar.gz<\/code><\/li>\n<li><code class=\"language-plaintext highlighter-rouge\">drush cr -y<\/code><\/li>\n<\/ol>\n<\/li>\n<li><code class=\"language-plaintext highlighter-rouge\">lando refresh<\/code> (This command gives us a clean starting point with our database.)\n<ol>\n<li><code class=\"language-plaintext highlighter-rouge\">composer install<\/code><\/li>\n<li><code class=\"language-plaintext highlighter-rouge\">drush cr -y<\/code><\/li>\n<li><code class=\"language-plaintext highlighter-rouge\">drush updb -y<\/code><\/li>\n<li><code class=\"language-plaintext highlighter-rouge\">drush cim -y<\/code><\/li>\n<li><code class=\"language-plaintext highlighter-rouge\">drush core:cron -y<\/code><\/li>\n<li><code class=\"language-plaintext highlighter-rouge\">drush cr -y<\/code><\/li>\n<li><code class=\"language-plaintext highlighter-rouge\">npm -C \/app\/web\/themes\/custom\/$theme run build:dev<\/code> (This last command will vary depending on whether you compile your theme with something like Webpack or Gulp.)<\/li>\n<\/ol>\n<\/li>\n<\/ol>\n<p>You can see why we turned these into commands. I can\u2019t tell you how many times I have seen one of these steps skipped and the resulting build just fails. Usually from a configuration conflict or an entity update that didn\u2019t happen as it should.<\/p>\n<h3 id=\"once-you-have-updated-your-composerjson\">Once you have updated your composer.json<\/h3>\n<ol>\n<li><code class=\"language-plaintext highlighter-rouge\">lando cupex<\/code> (This is kinda a goofy little shorthand I came up.)\n<ol>\n<li><code class=\"language-plaintext highlighter-rouge\">composer update<\/code> (Yes, I just update it all and I do so pretty regularly.)<\/li>\n<li><code class=\"language-plaintext highlighter-rouge\">drush updb -y<\/code> (Runs all your update and post-update hooks which changes the database.)<\/li>\n<li><code class=\"language-plaintext highlighter-rouge\">drush cex -y<\/code> (This is the shorthand for config-export and it takes all those database changes and writes them to config.)<\/li>\n<\/ol>\n<\/li>\n<li><code class=\"language-plaintext highlighter-rouge\">gaa<\/code> (<code class=\"language-plaintext highlighter-rouge\">git add -A<\/code> is my preferred way to deal with automation like this as it just grabs every change and I can see those changes in my editor.)<\/li>\n<li><code class=\"language-plaintext highlighter-rouge\">gcmsg \"My commit message\"<\/code> (This command is so much less verbose and easier to type than <code class=\"language-plaintext highlighter-rouge\">git commit -m \"My commit message\"<\/code>. We include our Jira issue IDs in the message to tie it all back to our sprint board.)<\/li>\n<li><code class=\"language-plaintext highlighter-rouge\">git push -u origin $branch-id<\/code> (I think there is shorthand for this that I just haven\u2019t taken the time to learn. Yeah\u2026 me too.)<\/li>\n<\/ol>\n<p>And here is where the magic happens and we let our GitHub and CircleCI integration take over and build our multidev environment for automated (Behat) and manual testing. QA still catches a lot, so we haven\u2019t stopped doing it. Our CircleCI scripts are pretty much using the same set of commands to build our artifacts that get pushed to our servers on Pantheon.<\/p>\n<h2 id=\"it-took-six-smaller-builds-to-finally-get-to-87\">It took six smaller builds to finally get to 8.7<\/h2>\n<p>You read that correct. I had to incrementally update a lot of \u201csmall\u201d things and get all those patches to apply cleanly before the final build would give me a site that had no errors and passing tests. That means I had to repeat the \u201c<em>latest<\/em> &gt; <em>refresh<\/em> &gt; <em>change some things<\/em> &gt; <em>cupex<\/em> &gt; <em>push to origin<\/em>\u201d over and over. Developing in PHP is so much like developing in Javascript now! Write some recipes and compile! Sigh.<\/p>\n<p>Funny story\u2026 after working on this upgrade off an on for a month, and having a build that worked in our dev site, our build process was halted by a system outage upstream.  <code class=\"language-plaintext highlighter-rouge\">\u00af\\_(\u30c4)_\/\u00af<\/code>.<\/p>\n<h2 id=\"was-it-worth-it\">Was it worth it<\/h2>\n<p>In truth, yes. I learned a lot about Drupal 8 in this process. Over the last year of this project with the City of Portland, I have learned just how much of my D7 and D6 knowledge applies and just how much does not. I am much more intimately aware of some of the subsystems now than I was before\u2014even if I still don\u2019t consider myself much of a true PHP developer as much as a really advanced site builder with some frontend chops.<\/p>\n<p>Drupal 8.7 has several cool new features that make it worth trying. In fact, on a clean install, I found a lot to love by grabbing Lightning 4\u2014released on May 16\u2014and adding a minimal amount of configuration.<\/p>\n<p>Chasing core and staying up to date with your dependencies as feasible is important with Drupal. In truth, this is important with any software now as dependency management and compiling a lot of a code written by a lot of different people is a must to build the complex tools that we try to make look simple to the people that use our software.<\/p>\n<p>Did I get any of the above completely wrong? Have a question I didn\u2019t answer? Hit me up in the comments. I haven\u2019t seen a comment in months.<\/p>\n",
            "summary": null
        }
    ],
    "feeds_item": [
        {
            "imported": "2024-12-16T23:06:46+00:00",
            "guid": null,
            "hash": "6bab1a49b9bb7b1e662637b22d5ca9e7",
            "target_type": "feeds_feed",
            "target_uuid": "ede5cec9-4a3f-4def-a896-6a22b335f811"
        }
    ],
    "field_description": [
        {
            "value": "Drupal 8.7 was released nearly two months ago and it took me that long to upgrade a complex site."
        }
    ],
    "field_featured_image": [],
    "field_seo_description": [],
    "field_seo_image": [],
    "field_seo_title": [],
    "field_tags": []
}